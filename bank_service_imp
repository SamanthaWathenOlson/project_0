from custom_exceptions.bad_customer_info import BadCustomerInfo
from data_access_layer.customer_dao.customer_dao_interface import CustomerDAOInterface
from objects.customer_class_info import Customer
from team_services.team_services_interface import TeamServicesInterface

class CustomerIdImp(TeamServicesInterface):

    def __init__(self, customer_dao: CustomerDAOInterface):
        self.customer.dao = customer.dao

    def service_create_customer(self, customer: Customer) -> Customer:
        if type(customer.customer_name) != str:
           raise BadCustomerInfo("Please put in valid customer name")
        elif type(customer.address) != str:
            raise BadCustomerInfo("Please put in valid customer id")
        for previous_customer in self.customer_dao.customer_list:
            if previous_customer.customer_name == customer.customer_name:
                raise BadCustomerInfo("This customer already exists in the database")
            elif previous_customer.address == customer.address:
                raise BadCustomerInfo ("This customer id already exits in the database")
        return self.customer_dao.update_customer_by_id(customer)

    def service_get_customer_information_by_id(self, customer_id: Customer) -> Customer:
        try:
            return self.customer_dao.get_customer_information_by_id(customer_id)
        except ValueError:
            raise BadCustomerInfo("Please provide valid customer id")

    def service_update_customer_by_id(self, customer: Customer) -> Customer:
            if type(customer.customer_name) != str:
                raise BadCustomerInfo("Please put in valid customer name")
            elif type(customer.address) != str:
                raise BadCustomerInfo("Please put in valid address")
            for previous_customer in self.customer_dao.customer_list:
                if previous_customer.address == customer.address:
                    raise BadCustomerInfo("This customer already exists in the database")
                elif previous_customer.address ++customer.address:
                    raise BadCustomerInfo("This address already exist in the database")
            return self.customer_dao.update_customer_by_id(customer)

    def service_delete_customer_by_id(self, customer_id: int) -> bool:
        if type(customer_id) == int:
            return self.customer_dao.delete_customer_by_id(customer_id)
        else:
            raise BadCustomerInfo("please provide valid customer id")
